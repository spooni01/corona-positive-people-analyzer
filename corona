#!/usr/bin/env bash

###############################################
#                                             #
# Name:     Corona - positive people analyzer #
# Author:   Adam Ližičiar, xlizic00           #
#                                             #
###############################################

#arrays
ages=( 0 0 0 0 0 0 0 0 0 0 0 0 0 ) # store ages of people, last one is none
genders=( 0 0 0 ) # man, woman, none

#set filters
var_filter_a=0
var_filter_a_value=""
var_filter_b=0
var_filter_b_value=""
var_filter_g=0
var_filter_g_value=""

#variables
declare -i count=1
command=""
date=""
sheet_name=daily.csv

#colors
RED="\033[0;31m"
NOCOLOR="\033[0m"

################################################
############### HELP FUNCTIONS #################
################################################

filter_a() { 
    if [ "$1" != "1" ] && [ "$2" == "-a" ] && [[ "$3" > "$4" ]]; then
        echo "1"
        return
    fi

    echo "0" 
}
filter_b() { 
    if [ "$1" != "1" ] && [ "$2" == "-b" ] && [[ "$3" < "$4" ]]; then
        echo "1"
        return
    fi

    echo "0"
}
filter_g() {
    if [ "$1" != "1" ] && [ "$2" == "-g" ] && [[ "$3" == "$4" ]]; then
        echo "1"
        return
    fi

    echo "0"   
}

# Functions will increase number in arrays
add_one_to_ages() {
    if [ "$1" == "" ]; then
        (( ages[12]++ ))
    elif [ "$1" -lt "6" ]; then
        (( ages[0]++ ))
    elif [ "$1" -lt  "16" ]; then
        (( ages[1]++ ))
    elif [ "$1" -lt  "26" ]; then
        (( ages[2]++ ))
    elif [ "$1" -lt  "36" ]; then
        (( ages[3]++ ))
    elif [ "$1" -lt  "46" ]; then
        (( ages[4]++ ))
    elif [ "$1" -lt  "56" ]; then
        (( ages[5]++ ))
    elif [ "$1" -lt  "66" ]; then
        (( ages[6]++ ))
    elif [ "$1" -lt  "76" ]; then
        (( ages[7]++ ))
    elif [ "$1" -lt  "86" ]; then
        (( ages[8]++ ))
    elif [ "$1" -lt  "96" ]; then
        (( ages[9]++ ))
    elif [ "$1" -lt  "106" ]; then
        (( ages[10]++ ))
    elif [ "$1" != "" ]; then
        (( ages[11]++ ))
    fi 
}
add_one_to_gender() {
    if [ "$1" == "M" ]; then
        (( genders[0]++ ))
    elif [ "$1" == "Z" ]; then
        (( genders[1]++ ))
    else 
        (( genders[2]++ ))    
    fi 
}

# Count dates and compare them
count_days() {
    if [ "$date" == "" ]; then
        date=$(date +$1)
    fi

    if [ "$date" == "$1" ]; then
        count=$((count + 1))
    else
        echo "$date: $count"
        count=$((1))
        date=$(date +$1)
    fi
}
count_months() {
    if [ "$date" == "" ]; then
        date=$(date +$1)
        date=${date::-3} #delete last 3 chars
    else
        tmp_date=$(date +$1)
        tmp_date=${tmp_date::-3} #format $tmp_date

        if [ "$date" == "$tmp_date" ]; then
            count=$((count + 1))
        else
            echo "$date: $count"    
            count=$((1))
            date=$(date +$tmp_date)
        fi 
    fi
}
count_years() {
    if [ "$date" == "" ]; then
        date=$(date +$1)
        date=${date::-6} #delete last 6 chars
    else
        tmp_date=$(date +$1)
        tmp_date=${tmp_date::-6} #format $tmp_date

        if [ "$date" == "$tmp_date" ]; then
            count=$((count + 1))
        else
            echo "$date: $count"    
            count=$((1))
            date=$(date +$tmp_date)
        fi 
    fi
}

# Send data by date type
send_data_by_date_type() {
    if [ "$1" == "daily" ]; then
        count_days $2
    elif [ "$1" == "monthly" ]; then    
        count_months $2
    elif [ "$1" == "yearly" ]; then    
        count_years $2
    fi     
}

# Sort filter type. $1 is text from terminal, $2 is position.
sort_type_of_filter() {
    if [ "$1" == "-a" ]; then
       var_filter_a=$2
       var_filter_a_value=$3
    elif [ "$1" == "-b" ]; then
       var_filter_b=$2
       var_filter_b_value=$3
    elif [ "$1" == "-g" ]; then
       var_filter_g=$2
       var_filter_g_value=$3
    fi   
}

# Save filters
save_filters() {
    if [ "$1" == "-a" ] || [ "$1" == "-b" ] || [ "$1" == "-g" ]; then
        sort_type_of_filter "$1" "1" "$4"
    fi
    if [ "$2" == "-a" ] || [ "$2" == "-b" ] || [ "$2" == "-g" ]; then
        sort_type_of_filter "$2" "3" "$5"
    fi
    if [ "$5" == "-a" ] || [ "$5" == "-b" ] || [ "$5" == "-g" ]; then
        sort_type_of_filter "$3" "5"  "$6"
    fi
}

# Save sheet name
save_sheet_name_and_command() {
    if [ "$3" == "" ]; then
        sheet_name=$2
        command=$1
    elif [ "$5" == "" ]; then
        sheet_name=$4
        command=$3
    elif [ "$7" == "" ]; then
        sheet_name=$6
        command=$5
    elif [ "$9" == "" ]; then
        sheet_name=$8
        command=$7
    elif [ "$11" == "" ]; then
        sheet_name=$10
        command=$9
    fi
}

################################################
################# FUNCTIONS ####################
################################################

# Write help text to the terminal.
help() {
    printf "${RED}"
    echo "--------------------------------------------------"
    echo "|                                                |"
    echo "|       CORONA - POSITIVE USER ANALYZER          |"
    echo "|                                                |"
    echo "--------------------------------------------------"
    printf "${NOCOLOR}"
    echo "FORMAT:"
    echo "corona [-h] [FILTERS] [COMMAND] [LOG [LOG2 [...]]"
    echo "--------------------------------------------------"
    echo "MAIN:"
    echo "-h -> vypise pomocnik"
    echo "--------------------------------------------------"
    echo "FILTERS:"
    echo "-a DATETIME -> vypis zaznamov iba pod danom datume"
    echo "-b DATETIME -> vypis zaznamov iba pred danym datumom"
    echo "-g GENDER -> filter podla pohlavia (M = muzi, Z = zeny)"
    echo "-s [WIDTH] -> vypis dat graficky"
    echo "--------------------------------------------------"
    echo "COMMAND:"
    echo "infected -> spocita pocet nakazenych"
    echo "merge -> spoji subory so zaznamami do jedneho"
    echo "gender -> pocet nakazenych pre jednotlive pohlavia"
    echo "age -> statistika nakazenych podla veku"
    echo "daily -> statistika nakazenych pre jednotlive dni"
    echo "monthly -> statistika nakazenych pre jednotlive mesiace"
    echo "yearly -> statistika nakazenych pre jednotlive roky"
    echo "countries -> stastika nakazenych pre krajiny nakazy"
    echo "districts -> stastika nakazenych pre okresy"   
    echo "regions -> stastika nakazenych pre kraje"
    printf "${RED}"
    echo "--------------------------------------------------"
    printf "${NOCOLOR}"
}

# Return 1 if person go throught all set filters
do_filters() {
    if [ "$var_filter_b" != 0 ] && [[ "$var_filter_b_value" > "$datum" ]] && [ "$var_filter_g" != 0 ] && [ "$var_filter_g_value" == "$pohlavi" ]; then
        # Set -b and -g
        echo "1"
    elif [ "$var_filter_a" != 0 ] && [[ "$var_filter_a_value" < "$datum" ]] && [ "$var_filter_g" != 0 ] && [ "$var_filter_g_value" == "$pohlavi" ]; then
        # Set -a and -g
        echo "1"
    elif [ "$var_filter_g" == 0 ] && [ "$var_filter_b" == 0 ] && [ "$var_filter_g" == 0 ]; then
        # No filter set
        echo "1" 
    elif [ "$var_filter_g" == 0 ]; then # must be, because it can jump here from second if
        if [ "$var_filter_a" != 0 ] && [[ "$var_filter_a_value" < "$datum" ]]; then
            # Set just -a
            echo "1"
        elif [ "$var_filter_b" != 0 ] && [[ "$var_filter_b_value" > "$datum" ]] && [ "$var_filter_g_value" != "$pohlavi" ]; then
            # Set just -b
            echo "1"   
        fi     
    elif [ "$var_filter_g" != 0 ] && [ "$var_filter_g_value" == "$pohlavi" ]; then
        # Set just -g
        echo "1"  
    fi
}

# Print number of persons in table by filter. If input is get_num "x",
# return value is total number of all infected people. 
get_num() {
    declare -i num=-1
    declare -i actual_line=0    # This counter is for skipping first line
 
    while IFS=, read -r id datum vek pohlavi kraj_nuts_kod okres_lau_kod nakaza_v_zahranici nakaza_zeme_csu_kod reportovano_khs
    do
        actual_line=$((actual_line + 1))
        tmp_return_filter_a=`filter_a "$actual_line" "$1" "$datum" "$2"`    
        tmp_return_filter_b=`filter_b "$actual_line" "$1" "$datum" "$2"`    
        tmp_return_filter_g=`filter_g "$actual_line" "$1" "$pohlavi" "$2"`    

        if [ "$tmp_return_filter_a" == "1" ]; then
            num=$((num + 1))  
        elif [ "$tmp_return_filter_b" == "1" ]; then
            num=$((num + 1))  
        elif [ "$tmp_return_filter_g" == "1" ]; then
            num=$((num + 1))  
        elif [ "$1" == "" ] && [ "$actual_line" != "1" ]; then
            num=$((num + 1))  
        fi
    done < $sheet_name

    echo "$num"   
}

# Print number for each gender. If input is get_gender "x",
# return value is total number of all infected people sorted
# by gender. 
get_gender() {
    declare -i actual_line=0    # This counter is for skipping first line
 
    while IFS=, read -r id datum vek pohlavi kraj_nuts_kod okres_lau_kod nakaza_v_zahranici nakaza_zeme_csu_kod reportovano_khs
    do
        actual_line=$((actual_line + 1))
        tmp_return_filter_a=`filter_a "$actual_line" "$1" "$datum" "$2"`    
        tmp_return_filter_b=`filter_b "$actual_line" "$1" "$datum" "$2"`    
        tmp_return_filter_g=`filter_g "$actual_line" "$1" "$pohlavi" "$2"`    

        if [ "$tmp_return_filter_a" == "1" ]; then
            add_one_to_gender $pohlavi
        elif [ "$tmp_return_filter_b" == "1" ]; then
            add_one_to_gender $pohlavi
        elif [ "$tmp_return_filter_g" == "1" ]; then
            add_one_to_gender $pohlavi
        elif [ "$1" == "" ] && [ "$actual_line" != "1" ]; then
            add_one_to_gender $pohlavi
        fi    
    done < $sheet_name

    printf "M: ${genders[0]}\n" 
    printf "Z: ${genders[1]}\n" 
    if [ "${genders[2]}" != "0" ]; then
        printf "None: ${genders[2]}\n" 
    fi
}

# return value is total number of all infected people sorted by age. 
get_age() {
    declare -i actual_line=0    # This counter is for skipping first line

    while IFS=, read -r id datum vek pohlavi kraj_nuts_kod okres_lau_kod nakaza_v_zahranici nakaza_zeme_csu_kod reportovano_khs
    do
        actual_line=$((actual_line + 1))
        tmp_return_filter_a=`filter_a "$actual_line" "$1" "$datum" "$2"`    
        tmp_return_filter_b=`filter_b "$actual_line" "$1" "$datum" "$2"`    
        tmp_return_filter_g=`filter_g "$actual_line" "$1" "$pohlavi" "$2"`    

        if [ "$tmp_return_filter_a" == "1" ]; then
            add_one_to_ages $vek
            x=5
        elif [ "$tmp_return_filter_b" == "1" ]; then
            add_one_to_ages $vek
            x=5
        elif [ "$tmp_return_filter_g" == "1" ]; then
            add_one_to_ages $vek
            x=5
        elif [ "$1" == "" ] && [ "$actual_line" != "1" ]; then
            add_one_to_ages $vek
        fi    
    done < $sheet_name

    printf  "0-5:\t ${ages[0]}\n" 
    printf  "6-15:\t ${ages[1]}\n"
    printf  "16-25:\t ${ages[2]}\n"
    printf  "26-35:\t ${ages[3]}\n"
    printf  "36-45:\t ${ages[4]}\n"
    printf  "46-55:\t ${ages[5]}\n"
    printf  "56-65:\t ${ages[6]}\n"
    printf  "66-75:\t ${ages[7]}\n"
    printf  "76-85:\t ${ages[8]}\n"
    printf  "86-95:\t ${ages[9]}\n"
    printf  "96-105:\t ${ages[10]}\n"
    printf  ">105:\t ${ages[11]}\n"
    if [ "${ages[12]}" != "0" ]; then
        printf  "None:\t ${ages[12]}\n"
    fi
}

# Print number of persons in table by days/months/years filter. If input is get_num "x",
# return value is total number of all infected people. 
get_date() {
    declare -i actual_line=0    # This counter is for skipping first line

    while IFS=, read -r id datum vek pohlavi kraj_nuts_kod okres_lau_kod nakaza_v_zahranici nakaza_zeme_csu_kod reportovano_khs
    do
        actual_line=$((actual_line + 1))
        tmp_return_filter_a=`filter_a "$actual_line" "$1" "$datum" "$2"`    
        tmp_return_filter_b=`filter_b "$actual_line" "$1" "$datum" "$2"`    
        tmp_return_filter_g=`filter_g "$actual_line" "$1" "$pohlavi" "$2"`    

        if [ "$tmp_return_filter_a" == "1" ]; then
            send_data_by_date_type "$3" "$datum"   
        elif [ "$tmp_return_filter_b" == "1" ]; then
            send_data_by_date_type "$3" "$datum"
        elif [ "$tmp_return_filter_g" == "1" ]; then
            send_data_by_date_type "$3" "$datum"
        elif [ "$1" == "" ] && [ "$actual_line" != "1" ]; then
            send_data_by_date_type "$3" "$datum"
        fi    
    done < $sheet_name

    echo "$date: $count" # Print last line
}

# Print results
print_infected() {
    total=$(( ${genders[0]} + ${genders[1]} + ${genders[2]} ))
    printf "$total\n" 
}
print_genders() {
    printf "M: ${genders[0]}\n" 
    printf "Z: ${genders[1]}\n" 
    if [ "${genders[2]}" != "0" ]; then
        printf "None: ${genders[2]}\n" 
    fi
}
print_age() {
    printf  "0-5:\t ${ages[0]}\n" 
    printf  "6-15:\t ${ages[1]}\n"
    printf  "16-25:\t ${ages[2]}\n"
    printf  "26-35:\t ${ages[3]}\n"
    printf  "36-45:\t ${ages[4]}\n"
    printf  "46-55:\t ${ages[5]}\n"
    printf  "56-65:\t ${ages[6]}\n"
    printf  "66-75:\t ${ages[7]}\n"
    printf  "76-85:\t ${ages[8]}\n"
    printf  "86-95:\t ${ages[9]}\n"
    printf  "96-105:\t ${ages[10]}\n"
    printf  ">105:\t ${ages[11]}\n"
    if [ "${ages[12]}" != "0" ]; then
        printf  "None:\t ${ages[12]}\n"
    fi
}

################################################
################### MAIN #######################
################################################

export POSIXLY_CORRECT=yes

# Help (in this case just print help text and end program)
if  [ "$1" = "-h" ] ; then
    help
else
    actual_line=0
    # Save filters
    save_filters "$1" "$3" "$5" "$2" "$4" "$6"
    save_sheet_name_and_command "$1" "$2" "$3" "$4" "$5" "$6" "$7" "$8" "$9" "$10" "$11" "$12"

    while IFS=, read -r id datum vek pohlavi kraj_nuts_kod okres_lau_kod nakaza_v_zahranici nakaza_zeme_csu_kod reportovano_khs
    do
        actual_line=$((actual_line + 1))
        tmp=`do_filters`

        if [ "$actual_line" != "1" ]; then # Skip first line
            if [ "$command" == "infected" ]; then
                if [ "$tmp" == "1" ]; then
                    add_one_to_gender "$pohlavi"
                fi    
            elif [ "$command" == "gender" ]; then
                if [ "$tmp" == 1 ]; then
                    add_one_to_gender "$pohlavi"
                fi    
            elif [ "$command" == "age" ]; then
                if [ "$tmp" == 1 ]; then
                    add_one_to_ages "$vek"
                fi    
            elif [ "$command" == "daily" ]; then
                if [ "$tmp" == 1 ]; then
                    echo "ok"
                fi   
            elif [ "$command" == "monthly" ]; then
                if [ "$tmp" == 1 ]; then
                    echo "ok"
                fi   
            elif [ "$command" == "yearly" ]; then
                if [ "$tmp" == 1 ]; then
                    echo "ok"
                fi     
            fi
        fi    
    done < $sheet_name

    # Print results
    if [ "$command" == "infected" ]; then
         print_infected
    elif [ "$command" == "gender" ]; then
        print_genders
    elif [ "$command" == "age" ]; then
        print_age
    fi    
fi

exit 0